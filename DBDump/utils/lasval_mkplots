#/bin/bash

myself="`readlink -f "$0"`"
mydir="`dirname "$myself"`"


CODEDIR=$mydir
CMSSW_CFG=$mydir/dbdump_cfg.py

#export LAS_DBCONNECT=${LAS_DBCONNECT:-oracle://cms_orcoff_prod/CMS_COND_311X_ECAL_LAS}
export LAS_DBCONNECT=${LAS_DBCONNECT:-oracle://cms_orcon_adg/CMS_COND_42X_ECAL_LASP}

export LAS_GTAG=GR_R_44_V15

export LAS_LTAG=${LAS_LTAG:-EcalLaserAPDPNRatios_last}
#export LAS_LTAG=${LAS_TAG:-EcalLaserAPDPNRatios_data_20120516_190380_193761_P_p1_tbc}
                         
export LAS_HISTDIR="/afs/cern.ch/user/e/ecalmon/www/out_plot/`date +%F-%H:%M:%S`"
export LAS_DUMPDIR="/data1/ecalmon/lcor_dump/`date +%F-%H:%M:%S`"
#export LAS_HISTDIR="/afs/cern.ch/user/m/mplaner/www/out_plot/`date +%F-%H:%M:%S`"
#export LAS_DUMPDIR="/tmp/mplaner/lcor_dump/`date +%F-%H:%M:%S`"
#mkdir /tmp/mplaner/out_plot/
#mkdir /tmp/mplaner/lcor_dump/

presc=1

#for local install of gnuplot
PATH=/usr/local/bin:$PATH

DATE=`date +%F-%H:%M`

# Note that we use `"$@"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
temp=`getopt -o hHt:T:c:p:d:D: --long help,rand,tmin:,tmax:,last:,root \
     -n 'last_laser_iov' -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

    # Note the quotes around `$TEMP': they are essential!
eval set -- "$temp"
 

help(){
    fmt <<EOF
 
 Usage: lasval_mkplots [OPTION]
 
 Produces validation plots of ECAL laser correction.

 -h --help    display this help

 -c DBCONNECT specify condition database connection string (default: $LAS_DBCONNECT)

 -t TAG       specify condition local tag

 -T TAG       specify condition global tag

 -p N         specify an IOV prescale value (default: 1, no prescale)

 -d DIR       specify destination directory for the plots (default: $LAS_PLOTDIR)

 -D DIR       specify destination directory for correction dumps (default: $LAS_DUMPDIR)

 --tmin T     starts IOV after T (unix time)

 --tmax T     stop IOV at T (unix time)

 --last N     select latest N IOVs

 --rand       when used with prescale, select random IOVs (uniform distribution)

 --root       uses ROOT instead of gnuplot to draw the plots

 -H           display IOV start time in a human readable format

 Authors: F. Ferri and Ph. Gras. CEA/Salcay
 
EOF

}

unset last
drawer=gnuplot #default is gnuplot

while true; do
     case "$1" in
         -H) date_format=human; shift;;
         -h|--help) help; exit 0;;
	 -c) LAS_DBCONNECT=$2; shift 2;;
         -t) LAS_LTAG=$2; shift 2;;
         -T) LAS_GTAG=$2; shift 2;;
	 -d) LAS_HISTDIR=$2; shift 2;;
	 -D) LAS_DUMPDIR=$2; shift 2;;
	 -p) presc=$2; shift 2;;
         --tmin) tmin=$2; shift 2;;
         --tmax) tmax=$2; shift 2;;
	 --last) last=$2; shift 2;;
         --rand) dorand=1; shift;;
	 --root) drawer=root; shift;;
         --) shift; break;;
         *) echo "Internal error!"; exit 1;;
     esac	
 done

if [ -n "$LAS_LTAG" ]; then
   TAG_OPT="-t $LAS_LTAG"
else
   TAG_OPT="-T $LAS_GTAG"
fi

#uses absolute paths:
LAS_HISTDIR="`readlink -f "$LAS_HISTDIR"`"
LAS_DUMPDIR="`readlink -f "$LAS_DUMPDIR"`"

mkdir -p "$LAS_HISTDIR"
mkdir -p "$LAS_DUMPDIR"
export LAS_HISTFILE="$LAS_HISTDIR/out_plot_${LAS_GTAG}_${LAS_LTAG}.root"


tmpdir="`mktemp -d`"
cd "$tmpdir"

trap "[ -d $tmpdir ] && rm -r $tmpdir; exit" INT TERM EXIT

echo "CMSSW will be run in $tmpdir"

GEN_IOV_OPT=
[ -n "$last" ] && GEN_IOV_OPT="--last $last"
[ -n "$tmin" ] && GEN_IOV_OPT="$GEN_IOV_OPT --tmin $tmin"
[ -n "$tmax" ] && GEN_IOV_OPT="$GEN_IOV_OPT --tmax $tmax"
[ -n "$LAS_DBCONNECT" ] && GEN_IOV_OPT="$GEN_IOV_OPT -c $LAS_DBCONNECT"
[ -n "$LAS_GTAG" ] && GEN_IOV_OPT="$GEN_IOV_OPT -T $LAS_GTAG"
[ -n "$LAS_LTAG" ] && GEN_IOV_OPT="$GEN_IOV_OPT -t $LAS_LTAG"

setcmsswenv(){
    d="`pwd`"
    cd "$CODEDIR"
    eval `scramv1 runtime -sh`
    export TNS_ADMIN=/afs/cern.ch/cms/DB/conddb/ADG
    cd "$d"
}

# parenthesis needed to isolate the CMSSW environment, which
# does not have lxml installed (which is needed by rr.py)
(

setcmsswenv

$mydir/gen_iov_list -p $presc $GEN_IOV_OPT > iov_time.txt

end=`head -n 1 iov_time.txt`
begin=`tail -n 1 iov_time.txt`

$mydir/plotlumi -b "@$begin" -e "@$end" "$LAS_HISTDIR/lumi"
gzip -f -9 $LAS_HISTDIR/lumi.dat

gzip -c iov_time.txt > $LAS_HISTDIR/iov_time.txt.gz

export MAX_EVENTS=`wc -l iov_time.txt | awk '{print $1}'`

[ ! -f "detid_geom.dat" ] && cp `find $CMSSW_BASE -name detid_geom.dat | head -1` .

#uncomment the 1st,3rd,4th lines and comment out the second to produce bad channel text files
#((cmsRun $CMSSW_CFG  | tee /tmp/mplaner/changetemp.txt | grep -v "ix") 3>&1 1>&2 2>&3 | tee  /tmp/mplaner/badtemp.txt ) | grep -v "ix"
cmsRun $CMSSW_CFG #| tee  ~/cout.txt 
 #grep "ix" /tmp/mplaner/changetemp.txt > $LAS_HISTDIR/changefile.txt
 #grep "ix" /tmp/mplaner/badtemp.txt > $LAS_HISTDIR/badfile.txt

	
cd "$LAS_HISTDIR"
ln -fs $LAS_HISTFILE ./prompt.root
)

ln -fs $LAS_HISTFILE ~/www/prompt/prompt.root

if [ "X$drawer" = Xroot ] ; then
    (cd $LAS_HISTDIR
	setcmsswenv
	root -q -b $mydir/pf_macro.cc\(\""$LAS_HISTFILE"\"\)
	echo "Converting eps files to png..."
	for f in *.eps; do convert -size 800x400 $f ${f%.eps}.png && rm $f; done
	rm histor*.root
	echo "Making animated GIF image..."
 #convert -delay 20 -loop 0 distr_eta_normalised_p2.png distr_eta_normalised_p2.png distr_eta_normalised_p2.png  history*.png anim.gif
	convert -delay 20 -loop 0 history*.png anim.gif
	convert -delay 20 -loop 0 EBprof2_BadChannel*.png EB.gif
	convert -delay 20 -loop 0 EEprof2_pZ_BadChannel*.png EEp.gif
	convert -delay 20 -loop 0 EEprof2_nZ_BadChannel*.png EEn.gif	
    )
else
    $mydir/all.sh
fi
    
    sed "s/%GTAG%/$LAS_GTAG/

s/%LTAG%/$LAS_LTAG/
s/%DATE%/$DATE/
s/%PRESC%/$presc/
" < $mydir/webtemplate.html > "$LAS_HISTDIR/index.html"
    
    cp "$mydir/style.css" "$LAS_HISTDIR"
    

echo "Histograms written in: $LAS_HISTDIR"

URL=`echo $LAS_HISTDIR | sed -n 's@/afs/cern.ch/user/e/ecalmon/www/@http://www.cern.ch/ecalmon/@p'`

[ -n "$URL" ] && echo "    $URL"
